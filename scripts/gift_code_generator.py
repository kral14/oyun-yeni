#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Tower Defense H…ôdiyy…ô Kodu Generatoru
Bu proqram ist…ôdiyiniz pul, elmas v…ô ulduz miqdarƒ± √º√ß√ºn h…ôdiyy…ô kodu yaradƒ±r.
"""

import tkinter as tk
from tkinter import ttk, messagebox
import json
import base64
import pyperclip


class GiftCodeGenerator:
    def __init__(self, root):
        self.root = root
        self.root.title("üéÅ Tower Defense H…ôdiyy…ô Kodu Generatoru")
        self.root.geometry("500x400")
        self.root.resizable(False, False)
        
        # Dark theme colors
        bg_color = "#1a1a2e"
        fg_color = "#ffffff"
        input_bg = "#16213e"
        button_bg = "#4a90e2"
        
        self.root.configure(bg=bg_color)
        
        # Style
        style = ttk.Style()
        style.theme_use('clam')
        style.configure('TLabel', background=bg_color, foreground=fg_color, font=('Arial', 11))
        style.configure('TEntry', fieldbackground=input_bg, foreground=fg_color, font=('Arial', 11))
        style.configure('TButton', background=button_bg, foreground=fg_color, font=('Arial', 10, 'bold'))
        
        # Main frame
        main_frame = tk.Frame(root, bg=bg_color, padx=20, pady=20)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Title
        title_label = tk.Label(main_frame, text="üéÅ H…ôdiyy…ô Kodu Generatoru", 
                              font=('Arial', 16, 'bold'), bg=bg_color, fg="#00d4ff")
        title_label.pack(pady=(0, 20))
        
        # Money input
        money_frame = tk.Frame(main_frame, bg=bg_color)
        money_frame.pack(fill=tk.X, pady=10)
        tk.Label(money_frame, text="üí∞ Pul miqdarƒ±:", bg=bg_color, fg=fg_color, 
                font=('Arial', 11), width=15, anchor='w').pack(side=tk.LEFT)
        self.money_entry = tk.Entry(money_frame, bg=input_bg, fg=fg_color, 
                                    font=('Arial', 11), width=20, insertbackground=fg_color)
        self.money_entry.pack(side=tk.LEFT, padx=10)
        self.money_entry.insert(0, "0")
        
        # Diamonds input
        diamonds_frame = tk.Frame(main_frame, bg=bg_color)
        diamonds_frame.pack(fill=tk.X, pady=10)
        tk.Label(diamonds_frame, text="üíé Elmas miqdarƒ±:", bg=bg_color, fg=fg_color, 
                font=('Arial', 11), width=15, anchor='w').pack(side=tk.LEFT)
        self.diamonds_entry = tk.Entry(diamonds_frame, bg=input_bg, fg=fg_color, 
                                        font=('Arial', 11), width=20, insertbackground=fg_color)
        self.diamonds_entry.pack(side=tk.LEFT, padx=10)
        self.diamonds_entry.insert(0, "0")
        
        # Stars input
        stars_frame = tk.Frame(main_frame, bg=bg_color)
        stars_frame.pack(fill=tk.X, pady=10)
        tk.Label(stars_frame, text="‚≠ê Ulduz miqdarƒ±:", bg=bg_color, fg=fg_color, 
                font=('Arial', 11), width=15, anchor='w').pack(side=tk.LEFT)
        self.stars_entry = tk.Entry(stars_frame, bg=input_bg, fg=fg_color, 
                                     font=('Arial', 11), width=20, insertbackground=fg_color)
        self.stars_entry.pack(side=tk.LEFT, padx=10)
        self.stars_entry.insert(0, "0")
        
        # Generate button
        generate_btn = tk.Button(main_frame, text="üéØ Kod Yaradƒ±n", 
                                 bg=button_bg, fg=fg_color, font=('Arial', 12, 'bold'),
                                 command=self.generate_code, 
                                 relief=tk.FLAT, padx=20, pady=10, cursor='hand2')
        generate_btn.pack(pady=20)
        
        # Code display
        code_label = tk.Label(main_frame, text="Yaradƒ±lan Kod:", 
                             bg=bg_color, fg=fg_color, font=('Arial', 11, 'bold'))
        code_label.pack(pady=(10, 5))
        
        # Text widget for code
        text_frame = tk.Frame(main_frame, bg=bg_color)
        text_frame.pack(fill=tk.BOTH, expand=True)
        
        self.code_text = tk.Text(text_frame, bg=input_bg, fg="#00ff00", 
                                 font=('Consolas', 10), height=5, wrap=tk.WORD,
                                 insertbackground=fg_color, relief=tk.FLAT, 
                                 borderwidth=1, highlightthickness=1,
                                 highlightbackground="#00d4ff", highlightcolor="#00d4ff")
        self.code_text.pack(fill=tk.BOTH, expand=True, padx=5)
        
        # Scrollbar
        scrollbar = tk.Scrollbar(text_frame, orient=tk.VERTICAL, command=self.code_text.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.code_text.config(yscrollcommand=scrollbar.set)
        
        # Copy button
        copy_btn = tk.Button(main_frame, text="üìã Kod Kopyalayƒ±n", 
                            bg="#357abd", fg=fg_color, font=('Arial', 10, 'bold'),
                            command=self.copy_code, 
                            relief=tk.FLAT, padx=15, pady=8, cursor='hand2')
        copy_btn.pack(pady=10)
        
        # Store generated code for clean copying
        self.generated_code = ""
        
        # Info label
        info_label = tk.Label(main_frame, 
                             text="üí° ƒ∞stifad…ô√ßi oyunda 'H…ôdiyy…ô Kodu' b√∂lm…ôsind…ô bu kodu daxil ed…ô bil…ôr",
                             bg=bg_color, fg="#888888", font=('Arial', 9),
                             wraplength=450)
        
        info_label.pack(pady=(10, 0))
        
    def generate_code(self):
        try:
            # Get values
            money = int(self.money_entry.get() or 0)
            diamonds = int(self.diamonds_entry.get() or 0)
            stars = int(self.stars_entry.get() or 0)
            
            # Validate
            if money < 0 or diamonds < 0 or stars < 0:
                messagebox.showerror("X…ôta", "M…ônfi d…ôy…ôrl…ôr daxil edil…ô bilm…ôz!")
                return
            
            if money == 0 and diamonds == 0 and stars == 0:
                messagebox.showwarning("X…ôb…ôrdarlƒ±q", "∆èn azƒ± bir h…ôdiyy…ô miqdarƒ± daxil edin!")
                return
            
            # Create data structure
            data = {
                "money": money,
                "diamonds": diamonds,
                "stars": stars
            }
            
            # Encode to JSON then base64 (without spaces for smaller code)
            json_str = json.dumps(data, separators=(',', ':'))
            encoded = base64.b64encode(json_str.encode('utf-8')).decode('utf-8')
            
            # Store the code for clean copying
            self.generated_code = encoded
            
            # Display code (ensure no extra characters)
            self.code_text.delete(1.0, tk.END)
            self.code_text.insert(1.0, encoded)
            
            # Verify what was inserted matches
            displayed_code = self.code_text.get(1.0, tk.END).strip()
            if displayed_code != encoded:
                print(f"‚ö†Ô∏è X∆èB∆èRDARLIQ: Text widget-dakƒ± kod uyƒüun g…ôlmir!")
                print(f"   Orijinal: {encoded}")
                print(f"   Widget: {displayed_code}")
            
            # Print to console for verification
            print("\n" + "="*60)
            print("üéÅ H∆èDƒ∞YY∆è KODU YARADILDI")
            print("="*60)
            print(f"üí∞ Pul: {money}")
            print(f"üíé Elmas: {diamonds}")
            print(f"‚≠ê Ulduz: {stars}")
            print("-"*60)
            print(f"üìã Kod: {encoded}")
            print("="*60)
            
            messagebox.showinfo("Uƒüurlu!", 
                              f"‚úÖ H…ôdiyy…ô kodu yaradƒ±ldƒ±!\n\n"
                              f"üí∞ Pul: {money}\n"
                              f"üíé Elmas: {diamonds}\n"
                              f"‚≠ê Ulduz: {stars}\n\n"
                              f"Kodu kopyalamaq √º√ß√ºn 'Kod Kopyalayƒ±n' d√ºym…ôsin…ô basƒ±n.")
            
        except ValueError:
            messagebox.showerror("X…ôta", "Z…ôhm…ôt olmasa yalnƒ±z r…ôq…ôm daxil edin!")
        except Exception as e:
            messagebox.showerror("X…ôta", f"X…ôta ba≈ü verdi: {e}")
    
    def copy_code(self):
        # Use stored code instead of reading from widget to avoid encoding issues
        if not self.generated_code:
            messagebox.showwarning("X…ôb…ôrdarlƒ±q", "∆èvv…ôlc…ô kod yaradƒ±n!")
            return
        
        try:
            pyperclip.copy(self.generated_code)
            messagebox.showinfo("Uƒüurlu!", "‚úÖ Kod clipboard-a kopyalandƒ±!")
            print(f"\n‚úÖ Kod clipboard-a kopyalandƒ±: {self.generated_code}")
        except Exception as e:
            messagebox.showerror("X…ôta", f"Clipboard-a kopyalama m√ºmk√ºn olmadƒ±: {e}")


def main():
    root = tk.Tk()
    app = GiftCodeGenerator(root)
    root.mainloop()


if __name__ == "__main__":
    main()


