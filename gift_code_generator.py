#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Tower Defense H…ôdiyy…ô Kodu Generatoru
Bu proqram ist…ôdiyiniz pul, elmas v…ô ulduz miqdarƒ± √º√ß√ºn h…ôdiyy…ô kodu yaradƒ±r.
"""

import tkinter as tk
from tkinter import ttk, messagebox
import json
import base64
import pyperclip


class GiftCodeGenerator:
    def __init__(self, root):
        self.root = root
        self.root.title("üéÅ Tower Defense H…ôdiyy…ô Kodu Generatoru")
        self.root.geometry("500x400")
        self.root.resizable(False, False)
        
        # Dark theme colors
        bg_color = "#1a1a2e"
        fg_color = "#ffffff"
        input_bg = "#16213e"
        button_bg = "#4a90e2"
        
        self.root.configure(bg=bg_color)
        
        # Style
        style = ttk.Style()
        style.theme_use('clam')
        style.configure('TLabel', background=bg_color, foreground=fg_color, font=('Arial', 11))
        style.configure('TEntry', fieldbackground=input_bg, foreground=fg_color, font=('Arial', 11))
        style.configure('TButton', background=button_bg, foreground=fg_color, font=('Arial', 10, 'bold'))
        
        # Main frame
        main_frame = tk.Frame(root, bg=bg_color, padx=20, pady=20)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Title
        title_label = tk.Label(main_frame, text="üéÅ H…ôdiyy…ô Kodu Generatoru", 
                              font=('Arial', 16, 'bold'), bg=bg_color, fg="#00d4ff")
        title_label.pack(pady=(0, 20))
        
        # Money input
        money_frame = tk.Frame(main_frame, bg=bg_color)
        money_frame.pack(fill=tk.X, pady=10)
        tk.Label(money_frame, text="üí∞ Pul miqdarƒ±:", bg=bg_color, fg=fg_color, 
                font=('Arial', 11), width=15, anchor='w').pack(side=tk.LEFT)
        self.money_entry = tk.Entry(money_frame, bg=input_bg, fg=fg_color, 
                                    font=('Arial', 11), width=20, insertbackground=fg_color)
        self.money_entry.pack(side=tk.LEFT, padx=10)
        self.money_entry.insert(0, "5000")
        
        # Diamonds input
        diamonds_frame = tk.Frame(main_frame, bg=bg_color)
        diamonds_frame.pack(fill=tk.X, pady=10)
        tk.Label(diamonds_frame, text="üíé Elmas miqdarƒ±:", bg=bg_color, fg=fg_color, 
                font=('Arial', 11), width=15, anchor='w').pack(side=tk.LEFT)
        self.diamonds_entry = tk.Entry(diamonds_frame, bg=input_bg, fg=fg_color, 
                                       font=('Arial', 11), width=20, insertbackground=fg_color)
        self.diamonds_entry.pack(side=tk.LEFT, padx=10)
        self.diamonds_entry.insert(0, "500")
        
        # Stars input
        stars_frame = tk.Frame(main_frame, bg=bg_color)
        stars_frame.pack(fill=tk.X, pady=10)
        tk.Label(stars_frame, text="‚≠ê Ulduz miqdarƒ±:", bg=bg_color, fg=fg_color, 
                font=('Arial', 11), width=15, anchor='w').pack(side=tk.LEFT)
        self.stars_entry = tk.Entry(stars_frame, bg=input_bg, fg=fg_color, 
                                    font=('Arial', 11), width=20, insertbackground=fg_color)
        self.stars_entry.pack(side=tk.LEFT, padx=10)
        self.stars_entry.insert(0, "100")
        
        # Generate button
        generate_btn = tk.Button(main_frame, text="üéÅ Kod Yarat", 
                                command=self.generate_code,
                                bg=button_bg, fg=fg_color, font=('Arial', 12, 'bold'),
                                padx=20, pady=10, cursor='hand2', relief=tk.FLAT)
        generate_btn.pack(pady=20)
        
        # Code display frame
        code_frame = tk.Frame(main_frame, bg=bg_color)
        code_frame.pack(fill=tk.X, pady=10)
        
        tk.Label(code_frame, text="Yaradƒ±lan kod:", bg=bg_color, fg=fg_color, 
                font=('Arial', 10)).pack(anchor='w', pady=(0, 5))
        
        code_display_frame = tk.Frame(code_frame, bg=input_bg, relief=tk.SUNKEN, borderwidth=2)
        code_display_frame.pack(fill=tk.X, pady=5)
        
        self.code_text = tk.Text(code_display_frame, height=3, bg=input_bg, fg="#00d4ff",
                                 font=('Courier', 10), wrap=tk.WORD, relief=tk.FLAT,
                                 insertbackground=fg_color, padx=5, pady=5)
        self.code_text.pack(fill=tk.BOTH, expand=True)
        
        # Copy button
        copy_btn = tk.Button(code_frame, text="üìã Kodu Kopyal…ô", 
                           command=self.copy_code,
                           bg="#4CAF50", fg=fg_color, font=('Arial', 10, 'bold'),
                           padx=15, pady=5, cursor='hand2', relief=tk.FLAT)
        copy_btn.pack(pady=5)
        
        # Info label
        info_label = tk.Label(main_frame, 
                             text="üí° ƒ∞pucu: Kodlar base64 il…ô kodlanƒ±r v…ô bir d…ôf…ô istifad…ô edil…ô bil…ôr.",
                             bg=bg_color, fg="#a0a0a0", font=('Arial', 9),
                             wraplength=450, justify=tk.LEFT)
        info_label.pack(pady=(10, 0))
        
    def generate_code(self):
        try:
            # Get values
            money = int(self.money_entry.get() or 0)
            diamonds = int(self.diamonds_entry.get() or 0)
            stars = int(self.stars_entry.get() or 0)
            
            # Validate
            if money < 0 or diamonds < 0 or stars < 0:
                messagebox.showerror("X…ôta", "M…ônfi d…ôy…ôrl…ôr daxil edil…ô bilm…ôz!")
                return
            
            if money == 0 and diamonds == 0 and stars == 0:
                messagebox.showwarning("X…ôb…ôrdarlƒ±q", "∆èn azƒ± bir h…ôdiyy…ô miqdarƒ± daxil edin!")
                return
            
            # Create data structure
            data = {
                "money": money,
                "diamonds": diamonds,
                "stars": stars
            }
            
            # Encode to JSON then base64 (without spaces for smaller code)
            json_str = json.dumps(data, separators=(',', ':'))
            encoded = base64.b64encode(json_str.encode('utf-8')).decode('utf-8')
            
            # Display code
            self.code_text.delete(1.0, tk.END)
            self.code_text.insert(1.0, encoded)
            
            # Print to console for verification
            print("\n" + "="*60)
            print("üéÅ H∆èDƒ∞YY∆è KODU YARADILDI")
            print("="*60)
            print(f"üí∞ Pul: {money}")
            print(f"üíé Elmas: {diamonds}")
            print(f"‚≠ê Ulduz: {stars}")
            print("-"*60)
            print(f"üìù JSON: {json_str}")
            print("-"*60)
            print(f"üîë Kod (Base64):")
            print(f"   {encoded}")
            print("-"*60)
            print(f"üìè Kod uzunluƒüu: {len(encoded)} simvol")
            print("-"*60)
            
            # Verify code by decoding it
            try:
                decoded_json = base64.b64decode(encoded).decode('utf-8')
                decoded_data = json.loads(decoded_json)
                print("‚úÖ KOD YOXLANILDI - Uyƒüundur!")
                print(f"   Dekodla≈üdƒ±rƒ±lan m…ôlumat: {decoded_data}")
                if decoded_data == data:
                    print("   ‚úÖ Yaradƒ±lan v…ô dekodla≈üdƒ±rƒ±lan kodlar eynidir!")
                else:
                    print("   ‚ö†Ô∏è X∆èTA: M…ôlumatlar uyƒüun g…ôlmir!")
            except Exception as verify_error:
                print(f"   ‚ùå KOD YOXLANILMASI UƒûURSUZ: {verify_error}")
            
            print("="*60 + "\n")
            
            # Auto copy to clipboard
            try:
                pyperclip.copy(encoded)
                messagebox.showinfo("Uƒüur", f"Kod yaradƒ±ldƒ± v…ô clipboard-a kopyalandƒ±!\n\n"
                                          f"üí∞ Pul: {money}\n"
                                          f"üíé Elmas: {diamonds}\n"
                                          f"‚≠ê Ulduz: {stars}\n\n"
                                          f"Kod konsolda g√∂st…ôrildi v…ô yoxlanƒ±ldƒ±!")
            except:
                messagebox.showinfo("Uƒüur", f"Kod yaradƒ±ldƒ±!\n\n"
                                          f"üí∞ Pul: {money}\n"
                                          f"üíé Elmas: {diamonds}\n"
                                          f"‚≠ê Ulduz: {stars}\n\n"
                                          f"Kod konsolda g√∂st…ôrildi v…ô yoxlanƒ±ldƒ±!")
                
        except ValueError:
            messagebox.showerror("X…ôta", "Yalnƒ±z r…ôq…ôm daxil edin!")
        except Exception as e:
            messagebox.showerror("X…ôta", f"X…ôta ba≈ü verdi: {str(e)}")
            print(f"\n‚ùå X∆èTA: {str(e)}\n")
    
    def copy_code(self):
        code = self.code_text.get(1.0, tk.END).strip()
        if not code:
            messagebox.showwarning("X…ôb…ôrdarlƒ±q", "∆èvv…ôlc…ô kod yaradƒ±n!")
            return
        
        try:
            pyperclip.copy(code)
            
            # Verify the code that will be copied
            print("\n" + "="*60)
            print("üìã KOD KOPYALANIR")
            print("="*60)
            print(f"Kod: {code}")
            print(f"Uzunluq: {len(code)} simvol")
            
            # Try to decode and verify
            try:
                decoded_json = base64.b64decode(code).decode('utf-8')
                decoded_data = json.loads(decoded_json)
                print("‚úÖ Kod uyƒüundur v…ô dekodla≈üdƒ±rƒ±la bilir!")
                print(f"   M…ôlumat: {decoded_data}")
            except Exception as e:
                print(f"‚ö†Ô∏è X∆èB∆èRDARLIQ: Kod dekodla≈üdƒ±rƒ±la bilm…ôz: {e}")
            
            print("="*60 + "\n")
            
            messagebox.showinfo("Uƒüur", "Kod clipboard-a kopyalandƒ± v…ô konsolda yoxlanƒ±ldƒ±!")
        except:
            messagebox.showerror("X…ôta", "Clipboard-a kopyalama m√ºmk√ºn olmadƒ±!")


def main():
    root = tk.Tk()
    app = GiftCodeGenerator(root)
    root.mainloop()


if __name__ == "__main__":
    main()

